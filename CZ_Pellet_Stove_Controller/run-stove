#!/bin/bash

DB="stove.db"

# GPIO ports for the four solid state relays
Combustion=24 # Combustion blower and bottom auger both run on the same relay
TopAuger=25 # May also be the sole feed auger on a single-auger pellet stove
RoomBlower=26 # This doesn't turn on until the stove body is up to temperature
Ignitor=27 # Relay needs to be able to handle twice the ignitor's current load
           # Current flows faster in a cold circuit, a 120W unit is 240W+ cold

# Example settings with explanations
Deadline=1200 # Number of seconds the stove body is allowed to reach OpTemp
OpTemp=90 # Stove body temperature required to switch over to run mode
MaxTemp=400 # Max stove body temperature allowed before forced idle burn mode
HighFeed=4.75 # Top auger pulse time (seconds) while in high burn mode
LowFeed=1.6 # Top auger pulse time (seconds) while in idle burn mode

# Now let's pull the stored settings out of the database
Data=$(sqlite3 $DB "SELECT * FROM Settings WHERE ID=1")
Data=$(echo $Data | tr "|" " ")
Deadline=$(echo $Data | awk '{print $2}')
OpTemp=$(echo $Data | awk '{print $3}')
MaxTemp=$(echo $Data | awk '{print $4}')
HighFeed=$(echo $Data | awk '{print $5}')
LowFeed=$(echo $Data | awk '{print $6}')
# ^^^-- If you make changes to the settings in the database with write.php
# you will then need to make a call to write.php?Restart=1 to force reload
# this script to make your changes take effect.

Mode=1 #                   Colors used in read.php?html
# 0 = Off                  Blue
# 1 = Starting up          Blue + Blink
# 2 = Running normally     Green
# 3 = Low temp shutdown    Amber + Blink
# 4 = Manual shutdown      Red + Blink

Temp=0 # Stove body temperature, anywhere but the side of the fire box
Feed=1 # $Feed = 1 when the stove isn't in shut down mode, 0 otherwise
HighBurn=1 # 1 = high burn mode, 0 = idle burn mode
FeedTime=$HighFeed # Top auger pulse time is high burn mode when starting up

StoveOn=1 # 1 = stove is running, 0 = stove is in shutdown mode
OffCount=0 # Used for counting how many times a manual shutdown is detected
LoopCount=0 # Prevents SD card abuse by only logging every 15 seconds

LastFeed=$(date +%s) # Unix time stamp of the last top auger feed
StartupDeadline=$(date +%s)
StartupDeadline=$(($StartupDeadline + $Deadline)) # Must reach OpTemp by this Unix time

Off=0 # Duh? Some relays use 0 for on and 1 for off, I still don't understand why
On=1  # It would have cost them a whole penny for an invertor transistor to stay sane

sqlite3 $DB "UPDATE Stats SET LowTempFail='',ShutDownTime='' WHERE ID=1"

/usr/bin/gpio -g mode $Combustion output
/usr/bin/gpio -g write $Combustion $On
/usr/bin/gpio -g mode $TopAuger output
/usr/bin/gpio -g write $TopAuger $Off
/usr/bin/gpio -g mode $RoomBlower output
/usr/bin/gpio -g write $RoomBlower $Off
/usr/bin/gpio -g mode $Ignitor output
/usr/bin/gpio -g write $Ignitor $On

function FeedPellets {
  ThisFeed=$(($CurrentTime - $LastFeed))
  if [ $ThisFeed -gt 5 ]; then
    # Must be more than 5 seconds since the last feed time
    # to guarantee that the every-15-seconds schedule works
    echo "Top auger feeding pellets..."
    LastFeed=$(date +%s)
    /usr/bin/gpio -g mode $TopAuger output
    /usr/bin/gpio -g write $TopAuger $On
    sleep $FeedTime
    /usr/bin/gpio -g write $TopAuger $Off
  fi
}

while true; do
  CurrentTime=$(date +%s)
  SQL="UPDATE Stats SET"
  LoopCount=$(($LoopCount + 1))

  # Read the stove body temperature
  Temp=$(sqlite3 $DB "SELECT Temperature FROM Stats WHERE ID=1")
  Temp=${Temp%.*} # $Temp is floating point and must be an integer for bash math
  clear
  date
  echo "Temperature: $Temp (F)"

  # Read the combustion blower GPIO port status
  Test=$(/usr/bin/gpio -g read $Combustion)
  if [ $Test -eq $On ]; then
    echo "Combustion blower: On"
    SQL="$SQL Combustion=1,"
  else
    echo "Combustion blower: Off"
    SQL="$SQL Combustion=0,"
  fi

  # Read the room air blower GPIO port status
  Test=$(/usr/bin/gpio -g read $RoomBlower)
  if [ $Test -eq $On ]; then
    echo "Room air blower: On"
    SQL="$SQL RoomBlower=1,"
  else
    echo "Room air blower: Off"
    SQL="$SQL RoomBlower=0,"
  fi

  # Read the ignitor GPIO port status
  Test=$(/usr/bin/gpio -g read $Ignitor)
  if [ $Test -eq $On ]; then
    echo "Ignitor: On"
    SQL="$SQL Ignitor=1,"
  else
    echo "Ignitor: Off"
    SQL="$SQL Ignitor=0,"
  fi

  # Check to see if the stove body is up to $OpTemp, turn on room air
  # blower and toggle $HighBurn as needed
  if [ $Temp -ge $OpTemp ]; then
    /usr/bin/gpio -g mode $Ignitor output
    /usr/bin/gpio -g write $Ignitor $Off
    /usr/bin/gpio -g mode $RoomBlower output
    /usr/bin/gpio -g write $RoomBlower $On
    if [ $Feed -eq 1 ]; then
      echo "Status: Stove is running"
      Mode=2
      CountDown=0
      StartupDeadline=$CurrentTime
      sqlite3 $DB "UPDATE Stats SET CountDown=0 WHERE ID=1"
      # Climate Czar output switch commands control this database field
      HighBurn=$(sqlite3 $DB "SELECT HighBurn FROM Stats WHERE ID=1")
    fi
  fi

  # Check to see if a manual shutdown has been requested or canceled
  StoveTest=$(sqlite3 $DB "SELECT StoveOn FROM Stats WHERE ID=1")
  if [ $StoveTest -eq 0 ]; then
    OffCount=$(($OffCount + 1))
    if [ $OffCount -eq 30 ]; then
      # If we detect 30 stove-off readings in a row, shut down the stove
      StoveOn=0
    fi
  else
    # If turned off by accident, you have 30 seconds to cancel shutdown
    OffCount=0
  fi

  # If we have 30 consecutive manual shutdown request readings,
  # begin the manual stove shutdown routine
  if [ $StoveOn -eq 0 ] && [ $Feed -eq 1 ]; then
    Feed=0
    Mode=4
    FeedTime=$LowFeed
    ShutdownDeadline=$(date +%s)
    # Shutdown time is twice the length of startup time for safety
    ShutdownDeadline=$(($ShutdownDeadline + $Deadline + $Deadline))
    /usr/bin/gpio -g mode $Ignitor output
    /usr/bin/gpio -g write $Ignitor $Off
    /usr/bin/gpio -g mode $TopAuger output
    /usr/bin/gpio -g write $TopAuger $Off
    ShutDownTime=$(date "+%Y-%m-%d %T")
    sqlite3 $DB "UPDATE Stats SET ShutDownTime='$ShutDownTime' WHERE ID=1"
  fi

  # Check to see if the stove body has dropped below $OpTemp after
  # a successful startup, or if the startup deadline expired without
  # reaching $opTemp, then begin the low temp shutdown routine
  if [ $Temp -lt $OpTemp ] && [ $Feed -eq 1 ]; then
    if [ $CurrentTime -ge $StartupDeadline ]; then
      Feed=0
      Mode=3
      ShutdownDeadline=$(date +%s)
      # Shutdown time is twice the length of startup time for safety
      ShutdownDeadline=$(($ShutdownDeadline + $Deadline + $Deadline))
      /usr/bin/gpio -g mode $Ignitor output
      /usr/bin/gpio -g write $Ignitor $Off
      /usr/bin/gpio -g mode $TopAuger output
      /usr/bin/gpio -g write $TopAuger $Off
      LowTempFail=$(date "+%Y-%m-%d %T")
      sqlite3 $DB "UPDATE Stats SET LowTempFail='$LowTempFail' WHERE ID=1"
    else
      CountDown=$(($StartupDeadline - $CurrentTime))
      echo "Status: Stove starting up, $CountDown seconds remaining"
      SQL="$SQL CountDown=$CountDown,"
    fi
  fi

  # If we've made it this far with no problems detected, $Feed will still
  # be 1 and we need to feed pellets by pulsing the top auger
  if [ $Feed -eq 1 ]; then
    Sec=$(date +%S)
    if [ $HighBurn -eq 1 ] && [ $Temp -lt $MaxTemp ]; then
      echo "Burn mode: High"
      FeedTime=$HighFeed
    else
      echo "Burn mode: Low"
      FeedTime=$LowFeed
    fi
    # Top auger pulses are only sent once every 15 seconds
    if [ $Sec -ge 0 ] && [ $Sec -le 4 ]; then
      FeedPellets
    elif [ $Sec -ge 15 ] && [ $Sec -le 19 ]; then
      FeedPellets
    elif [ $Sec -ge 30 ] && [ $Sec -le 34 ]; then
      FeedPellets
    elif [ $Sec -ge 45 ] && [ $Sec -le 49 ]; then
      FeedPellets
    fi
  else
    # Otherwise, $Feed is 0 which means we're shutting down
    if [ $CurrentTime -ge $ShutdownDeadline ]; then
      break # Shutdown routine complete
    else
      CountDown=$(($ShutdownDeadline - $CurrentTime))
      echo "Status: Shutting down in $CountDown seconds"
      SQL="$SQL CountDown=$CountDown,"
    fi
  fi

  # Only update the database every 15 seconds to save on SD card wear
  if [ $LoopCount -eq 0 ] || [ $LoopCount -eq 15 ] || [ $LoopCount -eq 30 ] || [ $LoopCount -eq 45 ]; then
    SQL="$SQL OpMode=$Mode WHERE ID=1"
    sqlite3 $DB "$SQL"
    LoopCount=0
    #echo $SQL > /tmp/stove.sql
    #echo "Temp=$Temp" >> /tmp/stove.sql
    #echo "Deadline=$Deadline" >> /tmp/stove.sql
    #echo "OpTemp=$OpTemp" >> /tmp/stove.sql
    #echo "MaxTemp=$MaxTemp" >> /tmp/stove.sql
    #echo "HighBurn=$HighBurn" >> /tmp/stove.sql
    #echo "FeedTime=$FeedTime" >> /tmp/stove.sql
    #echo "StoveTest=$StoveTest" >> /tmp/stove.sql
    #echo "OffCount=$OffCount" >> /tmp/stove.sql
    #echo "StoveOn=$StoveOn" >> /tmp/stove.sql
  fi

  # Sleep for 1 second just so this script doesn't hammer the CPU and SD card
  sleep 1
done

/usr/bin/gpio -g mode $Combustion output
/usr/bin/gpio -g write $Combustion $Off
/usr/bin/gpio -g mode $TopAuger output
/usr/bin/gpio -g write $TopAuger $Off
/usr/bin/gpio -g mode $RoomBlower output
/usr/bin/gpio -g write $RoomBlower $Off
/usr/bin/gpio -g mode $Ignitor output
/usr/bin/gpio -g write $Ignitor $Off
sqlite3 $DB "UPDATE Stats SET StoveOn=0,OpMode=0,Combustion=0,RoomBlower=0,Ignitor=0,CountDown=0 WHERE ID=1"
#echo "Stove shutdown process complete" > /tmp/stove.sql
sleep 30
